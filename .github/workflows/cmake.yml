name: CMake

on:
  push:
  pull_request:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive # Download the submodules (googletest)

    - name: Install GCC 11
      run:   |
             sudo apt update
             sudo apt install gcc-11 g++-11
      shell: bash

    - name: Configure GCC
      run: |
           sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 11
           sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 11
           sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-11 11
    - name: CMake Configure
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      # env:
      #  CC:  gcc-11
      #  CXX:  g++-11

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: CTest
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: LCOV Install
      # Install lcov to generate the .info file Coveralls requires
      run: sudo apt install lcov

    - name: LCOV Run
      # Generate the .info file for the Coverall action next, no-external excludes the standard library (and any other system library)
      run: lcov --capture --directory . --no-external --output-file lcov.info

    - name: LCOV Filter
      # Remove the files that should not show up in the test report (exclude the entire test folder)
#      run: lcov --remove lcov.info '*/test/*' -o lcov_filtered.info
      run: lcov --remove lcov.info -o lcov_filtered.info '*/test/*'\
        'src/I2CTransfer.cpp'\
        'src/I2CTransfer.h'\
        'src/millis.h'\
        'src/Packet.cpp'\
        'src/Packet.h'\
        'src/PacketCRC.h'\
        'src/SerialTransfer.cpp'\
        'src/SerialTransfer.h'\
        'src/SPITransfer.h'\
        'src/SPITransfer.cpp'

    - name: Coveralls
      uses: coverallsapp/github-action@1.1.3
      with:
        path-to-lcov: lcov_filtered.info # Ensure that the filtered .info file is used otherwise extra test data will be included in the report
        github-token: ${{ secrets.GITHUB_TOKEN }}