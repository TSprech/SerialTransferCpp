//
// Created by TSprech on 1/29/2023/01/29 17:58:00.
//

#include "gtest/gtest.h"
#include "SerialTransferCpp.hpp"
#include "SerialTransfer.h"
#include "Arduino.h"
#include <deque>

namespace {
  std::deque<uint8_t> rx_in{};

  inline SerialConfig custom_stdin_config = {
      .put_c = [](auto ch) { putc(ch, stdout); },
      .get_c = []() -> int { auto ch = rx_in.front(); rx_in.pop_front(); return ch; },
      .peek_c = []() { return !rx_in.empty(); }};


  TEST(SerialTransferCpp, uart_rx_data) {
    testing::internal::CaptureStdout();
    uint8_t rx_data[] = {0x7e,0x00,0xff,0x0b,0x24,0x00,0x00,0x90,0x40,0x68,0x65,0x6c,0x6c,0x6f,0x00,0x93,0x81}; // Generated from TX tests
    for (auto data : rx_data) {
      Serial.rx_buffer.push_back(data);
      rx_in.push_back(data);
    }

    SerialTransfer myTransfer;
    stcpp::SerialTransfer cppTransfer;

    {
      myTransfer.begin(Serial);

      struct __attribute__((packed)) STRUCT {
        char z;
        float y;
      } testStruct;

      char arr[6];

      uint16_t recSize = 0;

      if (myTransfer.available()) {
        recSize = myTransfer.rxObj(testStruct, recSize);
        recSize = myTransfer.rxObj(arr, recSize);
      }
      EXPECT_EQ(testStruct.z, '$');
      EXPECT_FLOAT_EQ(testStruct.y, 4.5F);
      auto hello = "hello";
      EXPECT_STREQ(arr, hello);
    }

    // CPP Implementation ----------------------------------------------------

    {
      cppTransfer.begin(custom_stdin_config);

      struct __attribute__((packed)) STRUCT {
        char z;
        float y;
      } testStruct;

      char arr[6];

      uint16_t recSize = 0;

      if (cppTransfer.available()) {
        recSize = cppTransfer.rxObj(testStruct, recSize);
        recSize = cppTransfer.rxObj(arr, recSize);
      }
      EXPECT_EQ(testStruct.z, '$');
      EXPECT_FLOAT_EQ(testStruct.y, 4.5F);
      auto hello = "hello";
      EXPECT_STREQ(arr, hello);
    }
  }

  TEST(SerialTransferCpp, uart_rx_datum) {
    testing::internal::CaptureStdout();
    uint8_t rx_data[] = {0x7e,0x0,0xff,0x5,0x24,0x0,0x0,0x90,0x40,0xf4,0x81}; // Generated from TX tests
    for (auto data : rx_data) {
      Serial.rx_buffer.push_back(data);
      rx_in.push_back(data);
    }

    SerialTransfer myTransfer;
    stcpp::SerialTransfer cppTransfer;

    {
      myTransfer.begin(Serial);

      struct __attribute__((packed)) STRUCT {
        char z;
        float y;
      } testStruct;


      uint16_t recSize = 0;

      if (myTransfer.available()) {
        myTransfer.rxObj(testStruct, recSize);
      }
      EXPECT_EQ(testStruct.z, '$');
      EXPECT_FLOAT_EQ(testStruct.y, 4.5F);
    }

    // CPP Implementation ----------------------------------------------------

    {
      cppTransfer.begin(custom_stdin_config);

      struct __attribute__((packed)) STRUCT {
        char z;
        float y;
      } testStruct;


      uint16_t recSize = 0;

      if (cppTransfer.available()) {
        cppTransfer.rxObj(testStruct, recSize);
      }
      EXPECT_EQ(testStruct.z, '$');
      EXPECT_FLOAT_EQ(testStruct.y, 4.5F);
    }
  }

//  TEST(SerialTransferCpp, uart_rx_file) {
//    testing::internal::CaptureStdout();
//    uint8_t rx_data[] = {0x7e,0x0,0xff,0x9,0x74,0x65,0x73,0x74,0x2e,0x74,0x78,0x74,0x0,0x92,0x81,0x7e,0x1,0xff,0xfe,0x0,0x0,0x4c,0x6f,0x72,0x65,0x6d,0x20,0x69,0x70,0x73,0x75,0x6d,0x20,0x64,0x6f,0x6c,0x6f,0x72,0x20,0x73,0x69,0x74,0x20,0x61,0x6d,0x65,0x74,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x65,0x63,0x74,0x65,0x74,0x75,0x65,0x72,0x20,0x61,0x64,0x69,0x70,0x69,0x73,0x63,0x69,0x6e,0x67,0x20,0x65,0x6c,0x69,0x74,0x2e,0x20,0x41,0x65,0x6e,0x65,0x61,0x6e,0x20,0x63,0x6f,0x6d,0x6d,0x6f,0x64,0x6f,0x20,0x6c,0x69,0x67,0x75,0x6c,0x61,0x20,0x65,0x67,0x65,0x74,0x20,0x64,0x6f,0x6c,0x6f,0x72,0x2e,0x20,0x41,0x65,0x6e,0x65,0x61,0x6e,0x20,0x6d,0x61,0x73,0x73,0x61,0x2e,0x20,0x43,0x75,0x6d,0x20,0x73,0x6f,0x63,0x69,0x69,0x73,0x20,0x6e,0x61,0x74,0x6f,0x71,0x75,0x65,0x20,0x70,0x65,0x6e,0x61,0x74,0x69,0x62,0x75,0x73,0x20,0x65,0x74,0x20,0x6d,0x61,0x67,0x6e,0x69,0x73,0x20,0x64,0x69,0x73,0x20,0x70,0x61,0x72,0x74,0x75,0x72,0x69,0x65,0x6e,0x74,0x20,0x6d,0x6f,0x6e,0x74,0x65,0x73,0x2c,0x20,0x6e,0x61,0x73,0x63,0x65,0x74,0x75,0x72,0x20,0x72,0x69,0x64,0x69,0x63,0x75,0x6c,0x75,0x73,0x20,0x6d,0x75,0x73,0x2e,0x20,0x44,0x6f,0x6e,0x65,0x63,0x20,0x71,0x75,0x61,0x6d,0x20,0x66,0x65,0x6c,0x69,0x73,0x2c,0x20,0x75,0x6c,0x74,0x72,0x69,0x63,0x69,0x65,0x73,0x20,0x6e,0x65,0x63,0x2c,0x20,0x70,0x65,0x6c,0x6c,0x65,0x6e,0x74,0x65,0x73,0x71,0x75,0x65,0x20,0x65,0x75,0x2c,0x20,0x70,0x72,0x65,0x74,0x69,0x75,0x6d,0x20,0x71,0x75,0x56,0x81,0x7e,0x1,0xff,0xfe,0xfe,0x0,0x2c,0x20,0x73,0x65,0x6d,0x2e,0x20,0x4e,0x75,0x6c,0x6c,0x61,0x20,0x63,0x6f,0x6e,0x73,0x65,0x71,0x75,0x61,0x74,0x20,0x6d,0x61,0x73,0x73,0x61,0x20,0x71,0x75,0x69,0x73,0x20,0x65,0x6e,0x69,0x6d,0x2e,0x20,0x44,0x6f,0x6e,0x65,0x63,0x20,0x70,0x65,0x64,0x65,0x20,0x6a,0x75,0x73,0x74,0x6f,0x2c,0x20,0x66,0x72,0x69,0x6e,0x67,0x69,0x6c,0x6c,0x61,0x20,0x76,0x65,0x6c,0x2c,0x20,0x61,0x6c,0x69,0x71,0x75,0x65,0x74,0x20,0x6e,0x65,0x63,0x2c,0x20,0x76,0x75,0x6c,0x70,0x75,0x74,0x61,0x74,0x65,0x20,0x65,0x67,0x65,0x74,0x2c,0x20,0x61,0x72,0x63,0x75,0x2e,0x20,0x49,0x6e,0x20,0x65,0x6e,0x69,0x6d,0x20,0x6a,0x75,0x73,0x74,0x6f,0x2c,0x20,0x72,0x68,0x6f,0x6e,0x63,0x75,0x73,0x20,0x75,0x74,0x2c,0x20,0x69,0x6d,0x70,0x65,0x72,0x64,0x69,0x65,0x74,0x20,0x61,0x2c,0x20,0x76,0x65,0x6e,0x65,0x6e,0x61,0x74,0x69,0x73,0x20,0x76,0x69,0x74,0x61,0x65,0x2c,0x20,0x6a,0x75,0x73,0x74,0x6f,0x2e,0x20,0x4e,0x75,0x6c,0x6c,0x61,0x6d,0x20,0x64,0x69,0x63,0x74,0x75,0x6d,0x20,0x66,0x65,0x6c,0x69,0x73,0x20,0x65,0x75,0x20,0x70,0x65,0x64,0x65,0x20,0x6d,0x6f,0x6c,0x6c,0x69,0x73,0x20,0x70,0x72,0x65,0x74,0x69,0x75,0x6d,0x2e,0x20,0x49,0x6e,0x74,0x65,0x67,0x65,0x72,0x20,0x74,0x69,0x6e,0x63,0x69,0x64,0x75,0x6e,0x74,0x2e,0x20,0x43,0x72,0x61,0x73,0x20,0x64,0x61,0x70,0x69,0x62,0x75,0x73,0x2e,0x20,0x56,0x69,0x76,0x8f,0x81,0x7e,0x1,0xff,0xfe,0xfc,0x1,0x75,0x73,0x20,0x65,0x6c,0x65,0x6d,0x65,0x6e,0x74,0x75,0x6d,0x20,0x73,0x65,0x6d,0x70,0x65,0x72,0x20,0x6e,0x69,0x73,0x69,0x2e,0x20,0x41,0x65,0x6e,0x65,0x61,0x6e,0x20,0x76,0x75,0x6c,0x70,0x75,0x74,0x61,0x74,0x65,0x20,0x65,0x6c,0x65,0x69,0x66,0x65,0x6e,0x64,0x20,0x74,0x65,0x6c,0x6c,0x75,0x73,0x2e,0x20,0x41,0x65,0x6e,0x65,0x61,0x6e,0x20,0x6c,0x65,0x6f,0x20,0x6c,0x69,0x67,0x75,0x6c,0x61,0x2c,0x20,0x70,0x6f,0x72,0x74,0x74,0x69,0x74,0x6f,0x72,0x20,0x65,0x75,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x65,0x71,0x75,0x61,0x74,0x20,0x76,0x69,0x74,0x61,0x65,0x2c,0x20,0x65,0x6c,0x65,0x69,0x66,0x65,0x6e,0x64,0x20,0x61,0x63,0x2c,0x20,0x65,0x6e,0x69,0x6d,0x2e,0x20,0x41,0x6c,0x69,0x71,0x75,0x61,0x6d,0x20,0x6c,0x6f,0x72,0x65,0x6d,0x20,0x61,0x6e,0x74,0x65,0x2c,0x20,0x64,0x61,0x70,0x69,0x62,0x75,0x73,0x20,0x69,0x6e,0x2c,0x20,0x76,0x69,0x76,0x65,0x72,0x72,0x61,0x20,0x71,0x75,0x69,0x73,0x2c,0x20,0x66,0x65,0x75,0x67,0x69,0x61,0x74,0x20,0x61,0x2c,0x20,0x74,0x65,0x6c,0x6c,0x75,0x73,0x2e,0x20,0x50,0x68,0x61,0x73,0x65,0x6c,0x6c,0x75,0x73,0x20,0x76,0x69,0x76,0x65,0x72,0x72,0x61,0x20,0x6e,0x75,0x6c,0x6c,0x61,0x20,0x75,0x74,0x20,0x6d,0x65,0x74,0x75,0x73,0x20,0x76,0x61,0x72,0x69,0x75,0x73,0x20,0x6c,0x61,0x6f,0x72,0x65,0x65,0x74,0x2e,0x20,0x51,0x75,0x69,0x73,0x71,0x75,0x65,0x20,0x72,0xe0,0x81,0x7e,0x1,0xff,0xfe,0xfa,0x2,0x72,0x75,0x6d,0x2e,0x20,0x41,0x65,0x6e,0x65,0x61,0x6e,0x20,0x69,0x6d,0x70,0x65,0x72,0x64,0x69,0x65,0x74,0x2e,0x20,0x45,0x74,0x69,0x61,0x6d,0x20,0x75,0x6c,0x74,0x72,0x69,0x63,0x69,0x65,0x73,0x20,0x6e,0x69,0x73,0x69,0x20,0x76,0x65,0x6c,0x20,0x61,0x75,0x67,0x75,0x65,0x2e,0x20,0x43,0x75,0x72,0x61,0x62,0x69,0x74,0x75,0x72,0x20,0x75,0x6c,0x6c,0x61,0x6d,0x63,0x6f,0x72,0x70,0x65,0x72,0x20,0x75,0x6c,0x74,0x72,0x69,0x63,0x69,0x65,0x73,0x20,0x6e,0x69,0x73,0x69,0x2e,0x20,0x4e,0x61,0x6d,0x20,0x65,0x67,0x65,0x74,0x20,0x64,0x75,0x69,0x2e,0x20,0x45,0x74,0x69,0x61,0x6d,0x20,0x72,0x68,0x6f,0x6e,0x63,0x75,0x73,0x2e,0x20,0x4d,0x61,0x65,0x63,0x65,0x6e,0x61,0x73,0x20,0x74,0x65,0x6d,0x70,0x75,0x73,0x2c,0x20,0x74,0x65,0x6c,0x6c,0x75,0x73,0x20,0x65,0x67,0x65,0x74,0x20,0x63,0x6f,0x6e,0x64,0x69,0x6d,0x65,0x6e,0x74,0x75,0x6d,0x20,0x72,0x68,0x6f,0x6e,0x63,0x75,0x73,0x2c,0x20,0x73,0x65,0x6d,0x20,0x71,0x75,0x61,0x6d,0x20,0x73,0x65,0x6d,0x70,0x65,0x72,0x20,0x6c,0x69,0x62,0x65,0x72,0x6f,0x2c,0x20,0x73,0x69,0x74,0x20,0x61,0x6d,0x65,0x74,0x20,0x61,0x64,0x69,0x70,0x69,0x73,0x63,0x69,0x6e,0x67,0x20,0x73,0x65,0x6d,0x20,0x6e,0x65,0x71,0x75,0x65,0x20,0x73,0x65,0x64,0x20,0x69,0x70,0x73,0x75,0x6d,0x2e,0x20,0x4e,0x61,0x6d,0x20,0x71,0x75,0x61,0x6d,0x20,0x6e,0x75,0x6e,0x63,0x2c,0x20,0xa9,0x81,0x7e,0x1,0xff,0xfe,0xf8,0x3,0x61,0x6e,0x64,0x69,0x74,0x20,0x76,0x65,0x6c,0x2c,0x20,0x6c,0x75,0x63,0x74,0x75,0x73,0x20,0x70,0x75,0x6c,0x76,0x69,0x6e,0x61,0x72,0x2c,0x20,0x68,0x65,0x6e,0x64,0x72,0x65,0x72,0x69,0x74,0x20,0x69,0x64,0x2c,0x20,0x6c,0x6f,0x72,0x65,0x6d,0x2e,0x20,0x4d,0x61,0x65,0x63,0x65,0x6e,0x61,0x73,0x20,0x6e,0x65,0x63,0x20,0x6f,0x64,0x69,0x6f,0x20,0x65,0x74,0x20,0x61,0x6e,0x74,0x65,0x20,0x74,0x69,0x6e,0x63,0x69,0x64,0x75,0x6e,0x74,0x20,0x74,0x65,0x6d,0x70,0x75,0x73,0x2e,0x20,0x44,0x6f,0x6e,0x65,0x63,0x20,0x76,0x69,0x74,0x61,0x65,0x20,0x73,0x61,0x70,0x69,0x65,0x6e,0x20,0x75,0x74,0x20,0x6c,0x69,0x62,0x65,0x72,0x6f,0x20,0x76,0x65,0x6e,0x65,0x6e,0x61,0x74,0x69,0x73,0x20,0x66,0x61,0x75,0x63,0x69,0x62,0x75,0x73,0x2e,0x20,0x4e,0x75,0x6c,0x6c,0x61,0x6d,0x20,0x71,0x75,0x69,0x73,0x20,0x61,0x6e,0x74,0x65,0x2e,0x20,0x45,0x74,0x69,0x61,0x6d,0x20,0x73,0x69,0x74,0x20,0x61,0x6d,0x65,0x74,0x20,0x6f,0x72,0x63,0x69,0x20,0x65,0x67,0x65,0x74,0x20,0x65,0x72,0x6f,0x73,0x20,0x66,0x61,0x75,0x63,0x69,0x62,0x75,0x73,0x20,0x74,0x69,0x6e,0x63,0x69,0x64,0x75,0x6e,0x74,0x2e,0x20,0x44,0x75,0x69,0x73,0x20,0x6c,0x65,0x6f,0x2e,0x20,0x53,0x65,0x64,0x20,0x66,0x72,0x69,0x6e,0x67,0x69,0x6c,0x6c,0x61,0x20,0x6d,0x61,0x75,0x72,0x69,0x73,0x20,0x73,0x69,0x74,0x20,0x61,0x6d,0x65,0x74,0x20,0x6e,0x69,0x70,0x81,0x7e,0x1,0xff,0xfe,0xf6,0x4,0x2e,0x20,0x44,0x6f,0x6e,0x65,0x63,0x20,0x73,0x6f,0x64,0x61,0x6c,0x65,0x73,0x20,0x73,0x61,0x67,0x69,0x74,0x74,0x69,0x73,0x20,0x6d,0x61,0x67,0x6e,0x61,0x2e,0x20,0x53,0x65,0x64,0x20,0x63,0x6f,0x6e,0x73,0x65,0x71,0x75,0x61,0x74,0x2c,0x20,0x6c,0x65,0x6f,0x20,0x65,0x67,0x65,0x74,0x20,0x62,0x69,0x62,0x65,0x6e,0x64,0x75,0x6d,0x20,0x73,0x6f,0x64,0x61,0x6c,0x65,0x73,0x2c,0x20,0x61,0x75,0x67,0x75,0x65,0x20,0x76,0x65,0x6c,0x69,0x74,0x20,0x63,0x75,0x72,0x73,0x75,0x73,0x20,0x6e,0x75,0x6e,0x63,0x2c,0x20,0x71,0x75,0x69,0x73,0x20,0x67,0x72,0x61,0x76,0x69,0x64,0x61,0x20,0x6d,0x61,0x67,0x6e,0x61,0x20,0x6d,0x69,0x20,0x61,0x20,0x6c,0x69,0x62,0x65,0x72,0x6f,0x2e,0x20,0x46,0x75,0x73,0x63,0x65,0x20,0x76,0x75,0x6c,0x70,0x75,0x74,0x61,0x74,0x65,0x20,0x65,0x6c,0x65,0x69,0x66,0x65,0x6e,0x64,0x20,0x73,0x61,0x70,0x69,0x65,0x6e,0x2e,0x20,0x56,0x65,0x73,0x74,0x69,0x62,0x75,0x6c,0x75,0x6d,0x20,0x70,0x75,0x72,0x75,0x73,0x20,0x71,0x75,0x61,0x6d,0x2c,0x20,0x73,0x63,0x65,0x6c,0x65,0x72,0x69,0x73,0x71,0x75,0x65,0x20,0x75,0x74,0x2c,0x20,0x6d,0x6f,0x6c,0x6c,0x69,0x73,0x20,0x73,0x65,0x64,0x2c,0x20,0x6e,0x6f,0x6e,0x75,0x6d,0x6d,0x79,0x20,0x69,0x64,0x2c,0x20,0x6d,0x65,0x74,0x75,0x73,0x2e,0x20,0x4e,0x75,0x6c,0x6c,0x61,0x6d,0x20,0x61,0x63,0x63,0x75,0x6d,0x73,0x61,0x6e,0x20,0x6c,0x6f,0xcd,0x81,0x7e,0x1,0xff,0xfe,0xf4,0x5,0x6d,0x20,0x69,0x6e,0x20,0x64,0x75,0x69,0x2e,0x20,0x43,0x72,0x61,0x73,0x20,0x75,0x6c,0x74,0x72,0x69,0x63,0x69,0x65,0x73,0x20,0x6d,0x69,0x20,0x65,0x75,0x20,0x74,0x75,0x72,0x70,0x69,0x73,0x20,0x68,0x65,0x6e,0x64,0x72,0x65,0x72,0x69,0x74,0x20,0x66,0x72,0x69,0x6e,0x67,0x69,0x6c,0x6c,0x61,0x2e,0x20,0x56,0x65,0x73,0x74,0x69,0x62,0x75,0x6c,0x75,0x6d,0x20,0x61,0x6e,0x74,0x65,0x20,0x69,0x70,0x73,0x75,0x6d,0x20,0x70,0x72,0x69,0x6d,0x69,0x73,0x20,0x69,0x6e,0x20,0x66,0x61,0x75,0x63,0x69,0x62,0x75,0x73,0x20,0x6f,0x72,0x63,0x69,0x20,0x6c,0x75,0x63,0x74,0x75,0x73,0x20,0x65,0x74,0x20,0x75,0x6c,0x74,0x72,0x69,0x63,0x65,0x73,0x20,0x70,0x6f,0x73,0x75,0x65,0x72,0x65,0x20,0x63,0x75,0x62,0x69,0x6c,0x69,0x61,0x20,0x43,0x75,0x72,0x61,0x65,0x3b,0x20,0x49,0x6e,0x20,0x61,0x63,0x20,0x64,0x75,0x69,0x20,0x71,0x75,0x69,0x73,0x20,0x6d,0x69,0x20,0x63,0x6f,0x6e,0x73,0x65,0x63,0x74,0x65,0x74,0x75,0x65,0x72,0x20,0x6c,0x61,0x63,0x69,0x6e,0x69,0x61,0x2e,0x20,0x4e,0x61,0x6d,0x20,0x70,0x72,0x65,0x74,0x69,0x75,0x6d,0x20,0x74,0x75,0x72,0x70,0x69,0x73,0x20,0x65,0x74,0x20,0x61,0x72,0x63,0x75,0x2e,0x20,0x44,0x75,0x69,0x73,0x20,0x61,0x72,0x63,0x75,0x20,0x74,0x6f,0x72,0x74,0x6f,0x72,0x2c,0x20,0x73,0x75,0x73,0x63,0x69,0x70,0x69,0x74,0x20,0x65,0x67,0x65,0x74,0x2c,0x20,0x69,0x6d,0x70,0x65,0x32,0x81,0x7e,0x1,0xff,0xe1,0xf2,0x6,0x69,0x65,0x74,0x20,0x6e,0x65,0x63,0x2c,0x20,0x69,0x6d,0x70,0x65,0x72,0x64,0x69,0x65,0x74,0x20,0x69,0x61,0x63,0x75,0x6c,0x69,0x73,0x2c,0x20,0x69,0x70,0x73,0x75,0x6d,0x2e,0x20,0x53,0x65,0x64,0x20,0x61,0x6c,0x69,0x71,0x75,0x61,0x6d,0x20,0x75,0x6c,0x74,0x72,0x69,0x63,0x65,0x73,0x20,0x6d,0x61,0x75,0x72,0x69,0x73,0x2e,0x20,0x49,0x6e,0x74,0x65,0x67,0x65,0x72,0x20,0x61,0x6e,0x74,0x65,0x20,0x61,0x72,0x63,0x75,0x2c,0x20,0x61,0x63,0x63,0x75,0x6d,0x73,0x61,0x6e,0x20,0x61,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x65,0x63,0x74,0x65,0x74,0x75,0x65,0x72,0x20,0x65,0x67,0x65,0x74,0x2c,0x20,0x70,0x6f,0x73,0x75,0x65,0x72,0x65,0x20,0x75,0x74,0x2c,0x20,0x6d,0x61,0x75,0x72,0x69,0x73,0x2e,0x20,0x50,0x72,0x61,0x65,0x73,0x65,0x6e,0x74,0x20,0x61,0x64,0x69,0x70,0x69,0x73,0x63,0x69,0x6e,0x67,0x2e,0x20,0x50,0x68,0x61,0x73,0x65,0x6c,0x6c,0x75,0x73,0x20,0x75,0x6c,0x6c,0x61,0x6d,0x63,0x6f,0x72,0x70,0x65,0x72,0x20,0x69,0x70,0x73,0x75,0x6d,0x20,0x72,0x75,0x74,0x72,0x75,0x6d,0x20,0x6e,0x75,0x6e,0x63,0x2e,0x20,0x4e,0x75,0x6e,0x63,0x20,0x6e,0x6f,0x6e,0x75,0x6d,0x6d,0x79,0x20,0x6d,0x65,0x74,0x75,0x73,0x2e,0x20,0x56,0x65,0x73,0x74,0x69,0x62,0x0,0x10,0x81}; // Generated from TX tests
//
//    for (auto data : rx_data) {
//      Serial.rx_buffer.push_back(data);
//      rx_in.push_back(data);
//    }
//
//    SerialTransfer myTransfer;
//    stcpp::SerialTransfer cppTransfer;
//
//    {
//      myTransfer.begin(Serial);
//
//      const int fileSize = 2000;
//      char file[fileSize];
//      char fileName[10];
//
//      uint16_t recSize = 0;
//
//      if (myTransfer.available())
//      {
//        if (!myTransfer.currentPacketID())
//        {
//          myTransfer.rxObj(fileName);
//          Serial.println();
//          Serial.println(fileName);
//        }
//        else if (myTransfer.currentPacketID() == 1)
//          for(uint8_t i=2; i<myTransfer.bytesRead; i++)
//            Serial.print((char)myTransfer.packet.rxBuff[i]);
//        Serial.println();
//      }
//
//
//      EXPECT_EQ(testStruct.z, '$');
//      EXPECT_FLOAT_EQ(testStruct.y, 4.5F);
//    }
//
//    // CPP Implementation ----------------------------------------------------
//
//    {
//      cppTransfer.begin(custom_stdin_config);
//
//      const int fileSize = 2000;
//      char file[fileSize];
//      char fileName[10];
//
//      uint16_t recSize = 0;
//
//      if (cppTransfer.available()) {
//        cppTransfer.rxObj(testStruct, recSize);
//      }
//      EXPECT_EQ(testStruct.z, '$');
//      EXPECT_FLOAT_EQ(testStruct.y, 4.5F);
//    }
//  }
}

